cmake_minimum_required(VERSION 3.5)

project(cgshop2021)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED true)

set(SRC ${CMAKE_SOURCE_DIR}/src)
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)
include_directories("${SRC}")
set(CMAKE_CXX_FLAGS "-Wall -pthread -g -O3 -funroll-loops")

set(JSON_BuildTests OFF CACHE INTERNAL "")
add_subdirectory(json)

find_package(Threads)
find_package(X11)

#add_library(sl SHARED IMPORTED)

add_executable(convert ${SRC}/convert.cpp)
add_executable(convert_back ${SRC}/convert_back.cpp)
add_executable(convert_back_back  ${SRC}/convert_back_back.cpp)
add_executable(fff ${SRC}/fff.cpp)
add_executable(vis ${SRC}/vis/vis.cpp)
add_executable(verify_and_score ${SRC}/verify_and_score.cpp)
add_executable(gif_vis ${SRC}/vis/gif_vis.cpp)
add_executable(two_opt_run ${SRC}/two_opt_run.cpp)
add_executable(two_perm_run ${SRC}/two_perm_run.cpp)
add_executable(k_perm_run ${SRC}/k_perm_run.cpp)
add_executable(intermediate_scoring ${SRC}/intermediate_scoring.cpp)
add_executable(try_save ${SRC}/try_save.cpp)
add_executable(optimize ${SRC}/optimize.cpp)

target_link_libraries(convert PRIVATE nlohmann_json::nlohmann_json stdc++fs)
target_link_libraries(convert_back PRIVATE nlohmann_json::nlohmann_json stdc++fs)
target_link_libraries(convert_back_back PRIVATE nlohmann_json::nlohmann_json stdc++fs)

target_link_libraries(vis X11)
target_link_libraries(gif_vis X11)
